import { createApp, close, createHttpRequest } from '@midwayjs/mock';
import { Framework } from '@midwayjs/koa';
import path from 'path';
import fs from 'fs';

describe('test/controller/media.test.ts', async () => {
  // create app
  const app = await createApp<Framework>();
  it('should POST /api/media/image_to_pdf using URL', async () => {
    // make request
    const result = await createHttpRequest(app)
      .post('/api/media/image_to_pdf')
      .send({ url: [''] });
    // use expect by jest
    expect(result.status).toBe(200);
    expect(result.body.message).toBe('OK');
    expect(result.body.data).toBe('pdf_url');
  });
  it('should POST /api/media/image_to_pdf using base64', async () => {
    // make request
    const result = await createHttpRequest(app)
      .post('/api/media/image_to_pdf')
      .send({ base64: [''] });
    // use expect by jest
    expect(result.status).toBe(200);
    expect(result.body.message).toBe('OK');
    expect(result.body.data).toBe('pdf_url');
  });
  it('should POST /api/media/image_to_pdf using file', async () => {
    // make request
    const imagePath = path.resolve(__dirname, 'image.jpg');
    const result = await createHttpRequest(app)
      .post('/api/media/image_to_pdf')
      .attach('file', fs.readFileSync(imagePath), 'image.jpg');
    // use expect by jest
    expect(result.status).toBe(200);
    expect(result.body.message).toBe('OK');
    expect(result.body.data).toBe('pdf_url');
  });
  // close app
  await close(app);
});
